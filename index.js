const { Scenes, session, Telegraf, Markup} = require('telegraf');
module.exports = {Markup}
require('dotenv').config()
const {otsen, startpx, pokaz, pokazns} = require('./additions/markups');
const { collection, ObjectId } = require('./additions/db');
const bot = new Telegraf(process.env.BOT_TOKEN);
const { enter, leave } = Scenes.Stage;


const get_author = new Scenes.BaseScene("get_author");

get_author.enter(async ctx => {
    try {
        await ctx.reply('üéõÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∏—Ç–º–µ–π–∫–µ—Ä—Å–∫–∏–π –Ω–∏–∫:')
    } catch (e) {
        console.error(e);
    }
})

get_author.on('text', async ctx => {
    try {
        const db = await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {bitmar: ctx.message.text}})
        await ctx.tg.sendAudio(1031267639, db.value.audio_file, {caption: `<b>–ë–∏—Ç–º–∞—Ä—å:</b> <a href="https://${ctx.from.id}.com">${ctx.message.text}</a>`,reply_markup: {inline_keyboard: otsen}, parse_mode: 'HTML'})
        await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏–ª ‚úÖ')
        await ctx.scene.leave('get_author')
    } catch (e) {
        console.error(e);
    }
})

const stage = new Scenes.Stage([get_author]);  
bot.use(session());
bot.use(stage.middleware());  

bot.start(async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(!db) {
            await collection.insertOne({
                user_id: ctx.from.id,
                subscribed: false
            })
            await collection.findOneAndUpdate({_id: new ObjectId('64901b527a931a00216404d5')}, {$push: {users: ctx.from.id}})
        }
        if(ctx.from.id == 1031267639) return await ctx.reply('üéß –ó–¥–∞—Ä–æ–≤–∞, –ü–æ—Ç–∞—Ç–∞! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å–≤–æ–∏—Ö —Ä–∞–±–æ—Ç—è–≥ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–æ–≤.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–µ–∫–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ü–µ–Ω üéß"</b>', {parse_mode: "HTML", reply_markup: {keyboard: startpx, resize_keyboard: true}})
        await ctx.reply('üéß –ó–¥–∞—Ä–æ–≤–∞, –¥–æ—Ä–æ–≥–æ–π —Ä–∞–±–æ—Ç—è–≥–∞! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–∫–∏ –Ω–∞ –∑–∞—Ü–µ–Ω –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ <a href="https://www.youtube.com/channel/UCqfrkuibnQSwzMHADk0fJOw">PXTATXES</a>.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Ç—Ä–µ–∫: ', {parse_mode: "HTML"})
    } catch (e) {
       console.error(e); 
    }
});

bot.help(async ctx => {
    try {
        await ctx.reply('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–∫–∏ –Ω–∞ –∑–∞—Ü–µ–Ω –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ <a href="https://www.youtube.com/channel/UCqfrkuibnQSwzMHADk0fJOw">PXTATXES</a>.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Ç—Ä–µ–∫: ', {parse_mode: "HTML"})
    } catch (e) {
       console.error(e); 
    }
});

bot.on('audio', async ctx => {
    try {
        // -1001974175255
        const isstrm = await collection.findOne({_id: new ObjectId('64901b527a931a00216404d5')})
        if(!isstrm.is_stream) return await ctx.reply('‚ö†Ô∏è –ó–∞—Ü–µ–Ω —Ç—Ä–µ–∫–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω, —è —Å–æ–æ–±—â—É –≤–∞–º')
        const db = await collection.findOne({user_id: ctx.from.id})
        
        const inchanel = await ctx.tg.getChatMember(-1001559267480, ctx.from.id)
        if(inchanel.status == 'left') {
            return await ctx.reply('‚ö†Ô∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç—Ä–µ–∫ –Ω–∞ –∑–∞—Ü–µ–Ω, –≤–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª <a href="https://t.me/pxtatxes">"–ü–û–¢–≠–ô–¢–û–°"</a>', {disable_web_page_preview: true, parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª üì¢', 'https://t.me/pxtatxes')]]}})
        }else {
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {subscribed: true}})
        }

        if(isstrm.senders.includes(ctx.from.id)) return await ctx.reply('‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç—Ä–µ–∫')

        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {audio_file: ctx.message.audio.file_id}})
        await collection.findOneAndUpdate({_id: new ObjectId('64901b527a931a00216404d5')}, {$push: {senders: ctx.from.id}})
        await ctx.scene.enter('get_author')
    } catch (e) {
       console.error(e); 
    }
})


function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms))
}

bot.hears(['–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ü–µ–Ω üéß', 'üéß –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ü–µ–Ω üéß'], async ctx => {
    try {
        if(ctx.from.id != 5103314362 && ctx.from.id != 1031267639) return
        const admdb = await collection.findOne({_id: new ObjectId('64901b527a931a00216404d5')})
        if(admdb.is_stream == true) return await ctx.reply('–ê–∫—Ç–∏–≤–Ω–æ üéß')
        await ctx.reply('–£–≤–µ–¥–æ–º–ª—è—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ üì¢\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ...', {reply_markup: {remove_keyboard: true}})
        // admdb.users.length
        for (let i = 0; i < admdb.users.length; i++) {
            await ctx.tg.sendMessage(admdb.users[i], 'üü¢ –ó–∞—Ü–µ–Ω –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à —Ç—Ä–µ–∫:', {disable_notification: false})
            await sleep(50)
        }
        await ctx.reply('–û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–∫–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç—Ä–µ–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–º —Ç—Ä–µ–∫–∞–º –≤—ã –¥–∞–ª–∏ –æ—Ü–µ–Ω–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üóÉÔ∏è\n\n–¢—Ä–µ–∫–∏ –±—É–¥—É—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', {reply_markup: {keyboard: pokaz, resize_keyboard: true}})
        await collection.findOneAndUpdate({_id: new ObjectId('64901b527a931a00216404d5')}, {$set: {is_stream: true, prf: [], top: [], rs: [], senders: []}})
    } catch (e) {
        console.error(e);
    }
})

bot.hears(['üõë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ü–µ–Ω üõë'], async ctx => {
    try {
        if(ctx.from.id != 5103314362 && ctx.from.id != 1031267639) return
        const admdb = await collection.findOne({_id: new ObjectId('64901b527a931a00216404d5')})
        if(admdb.is_stream == false) return
        await collection.findOneAndUpdate({_id: new ObjectId('64901b527a931a00216404d5')}, {$set: {is_stream: false}})
        await ctx.reply('–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ', {reply_markup: {keyboard: pokazns, resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

bot.hears(['üóÉÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å - –ö–†–£–¢–û üóÉÔ∏è', 'üóÉÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å - PRESS-F üóÉÔ∏è', 'üíØ –†–ê–ë–û–¢–´ –°–¢–†–ò–ú–ê üíØ'], async ctx => {
    try {
        if(ctx.from.id != 5103314362 && ctx.from.id != 1031267639) return
        const admdb = await collection.findOne({_id: new ObjectId('64901b527a931a00216404d5')})
        if(ctx.message.text == 'üóÉÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å - –ö–†–£–¢–û üóÉÔ∏è') {
            if(admdb.top.length == 0) return await ctx.reply('–ü—É—Å—Ç–æ üóø', {reply_markup: {keyboard: pokaz, resize_keyboard: true}})
            await ctx.reply(`üóÉÔ∏è <b>–í–æ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π:</b> –ö–†–£–¢–û`, {parse_mode: 'HTML'})
            for (let i = 0; i < admdb.top.length; i++) {
                await ctx.replyWithAudio(admdb.top[i].audio, {caption: `<b>–ë–∏—Ç–º–∞—Ä—å:</b> ${admdb.top[i].bitmar}`, parse_mode: 'HTML'})
                await sleep(50)
            }
        }else if(ctx.message.text == 'üóÉÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å - PRESS-F üóÉÔ∏è') {
            if(admdb.prf.length == 0) return await ctx.reply('–ü—É—Å—Ç–æ üóø', {reply_markup: {keyboard: pokaz, resize_keyboard: true}})
            await ctx.reply(`üóÉÔ∏è <b>–í–æ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π:</b> PRESS-F`, {parse_mode: 'HTML'})
            for (let i = 0; i < admdb.prf.length; i++) {
                await ctx.replyWithAudio(admdb.prf[i].audio, {caption: `<b>–ë–∏—Ç–º–∞—Ä—å:</b> ${admdb.prf[i].bitmar}`, parse_mode: 'HTML'})
                await sleep(50)
            }
        }else {
            if(admdb.rs.length == 0) return await ctx.reply('–ü—É—Å—Ç–æ üóø', {reply_markup: {keyboard: pokaz, resize_keyboard: true}})
            await ctx.reply(`üóÉÔ∏è <b>–í–æ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π:</b> –†–ê–ë–û–¢–ê –°–¢–†–ò–ú–ê`, {parse_mode: 'HTML'})
            for (let i = 0; i < admdb.rs.length; i++) {
                await ctx.replyWithAudio(admdb.rs[i].audio, {caption: `<b>–ë–∏—Ç–º–∞—Ä—å:</b> ${admdb.rs[i].bitmar}`, parse_mode: 'HTML'})
                await sleep(50)
            }
        }
    } catch (e) {
        console.error(e);
    }
})

bot.action('ogon', async ctx => {
    try {
        const uid = await Number(ctx.callbackQuery.message.caption_entities[1].url.replace(/[^0-9]/g, ""));
        const db = await collection.findOne({user_id: uid})
        await collection.findOneAndUpdate({_id: new ObjectId('64901b527a931a00216404d5')}, {$push: {top: {audio: ctx.callbackQuery.message.audio.file_id, bitmar: db.bitmar}}})
        await ctx.editMessageCaption(`<b>–ë–∏—Ç–º–∞—Ä—å:</b> ${db.bitmar}\n\n<b>–û—Ü–µ–Ω–∫–∞:</b> üî•`, {parse_mode: 'HTML'})
        await ctx.tg.sendAudio(db.user_id, ctx.callbackQuery.message.audio.file_id, {caption: '<b>–û—Ü–µ–Ω–∫–∞:</b> üî•', parse_mode: 'HTML'})
        await ctx.answerCbQuery()
    } catch (e) {
       console.error(e); 
    }
})

bot.action('pref', async ctx => {
    try {
        const uid = await Number(ctx.callbackQuery.message.caption_entities[1].url.replace(/[^0-9]/g, ""));
        const db = await collection.findOne({user_id: uid})
        await collection.findOneAndUpdate({_id: new ObjectId('64901b527a931a00216404d5')}, {$push: {prf: {audio: ctx.callbackQuery.message.audio.file_id, bitmar: db.bitmar}}})
        await ctx.editMessageCaption(`<b>–ë–∏—Ç–º–∞—Ä—å:</b> ${db.bitmar}\n\n<b>–û—Ü–µ–Ω–∫–∞:</b> üëé`, {parse_mode: 'HTML'})
        await ctx.tg.sendAudio(db.user_id, ctx.callbackQuery.message.audio.file_id, {caption: '<b>–û—Ü–µ–Ω–∫–∞:</b> üëé', parse_mode: 'HTML'})
        await ctx.answerCbQuery()
    } catch (e) {
       console.error(e); 
    }
})

bot.action('streamwork', async ctx => {
    try {
        const uid = await Number(ctx.callbackQuery.message.caption_entities[1].url.replace(/[^0-9]/g, ""));
        const db = await collection.findOne({user_id: uid})
        await collection.findOneAndUpdate({_id: new ObjectId('64901b527a931a00216404d5')}, {$push: {rs: {audio: ctx.callbackQuery.message.audio.file_id, bitmar: db.bitmar}}})
        await ctx.editMessageCaption(`<b>–ë–∏—Ç–º–∞—Ä—å:</b> ${db.bitmar}\n\n<b>–û—Ü–µ–Ω–∫–∞:</b> –†–ê–ë–û–¢–ê –°–¢–†–ò–ú–ê üíØ`, {parse_mode: 'HTML'})
        await ctx.tg.sendAudio(db.user_id, ctx.callbackQuery.message.audio.file_id, {caption: '<b>–û—Ü–µ–Ω–∫–∞:</b> –†–ê–ë–û–¢–ê –°–¢–†–ò–ú–ê üíØ', parse_mode: 'HTML'})
        await ctx.answerCbQuery()
    } catch (e) {
       console.error(e); 
    }
})


bot.launch({dropPendingUpdates: true});
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));